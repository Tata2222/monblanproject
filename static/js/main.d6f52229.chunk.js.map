{"version":3,"sources":["components/DatePicker/DatePicker.js","components/Header/Header.js","components/Card/Card.js","components/CardList/CardList.js","components/Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["Datepicker","useState","Date","startDate","setStartDate","endDate","setEndDate","selected","onChange","date","selectsStart","style","width","selectsEnd","minDate","Header","className","Card","grid","card","console","log","cardClass","cn","color","src","img","alt","id","fontSize","cards","title","CardList","setGrid","cardListClass","cardlist","display","type","onClick","map","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6f52229.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nconst Datepicker = () => {\r\n  const [startDate, setStartDate] = useState(new Date(\"2014/02/08\"));\r\n  const [endDate, setEndDate] = useState(new Date(\"2014/02/10\"));\r\n\r\n  return (\r\n    <>\r\n      <DatePicker\r\n        selected={startDate}\r\n        onChange={date => setStartDate(date)}\r\n        selectsStart\r\n        startDate={startDate}\r\n        endDate={endDate}\r\n        style={{width: '120px'}}\r\n      />\r\n      <DatePicker\r\n        selected={endDate}\r\n        onChange={date => setEndDate(date)}\r\n        selectsEnd\r\n        startDate={startDate}\r\n        endDate={endDate}\r\n        minDate={startDate}\r\n      />\r\n  </>\r\n  );\r\n  \r\n}\r\n\r\nexport default Datepicker;","import React from 'react';\r\nimport Datepicker from '../DatePicker/DatePicker';\r\nimport './Header.scss';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__container\">\r\n        <div className=\"header__info\">\r\n          <p className=\"header__title\">monblanproject</p>\r\n          <p className=\"header__badge\">start on 17-09-2021</p>\r\n        </div>\r\n        <div className=\"header__info\">\r\n          <p className=\"header__info-item\"><span>870</span>posts</p>\r\n          <p className=\"header__info-item\"><span>11,787</span>followers</p>\r\n          <p className=\"header__info-item\"><span>112</span>following</p>\r\n        </div>\r\n        <div className=\"header__datepicker\">\r\n          <p className=\"header__datepicker-title\">Date</p>\r\n          <Datepicker />\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport './Card.scss';\r\n\r\nexport const Card = ({grid, card}) => {\r\n  console.log(card)\r\n \r\n  const cardClass = cn({\r\n    'card': !grid,\r\n    'card-square': grid,\r\n  });\r\n\r\n  const color = grid ? 'white' : 'black';\r\n\r\n  return (\r\n    <section className={`${cardClass}`}>\r\n      <div className={`${cardClass}__img-container`}>\r\n        <img className={`${cardClass}__img`} src={card.img} alt={`img_${card.id}`} />\r\n      </div> \r\n\r\n      <div className={`${cardClass}__info`}>\r\n        <div className={`${cardClass}__info-today`}>\r\n          <p className={`${cardClass}-title`}>Today</p>\r\n          <div className={`${cardClass}__info-panel`}>\r\n            <div className={`${cardClass}__info-likes`}>\r\n              <FavoriteIcon style={{ fontSize: 20, color: `${color}`}}/>\r\n              <span className=\"card__info-count\">128</span>\r\n            </div>\r\n            <div className={`${cardClass}-comments`}>\r\n              <ChatBubbleIcon style={{ fontSize: 20, color: `${color}`}}/>\r\n              <span className=\"card__info-count\">31</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={`${cardClass}__info-date`}>\r\n          <p className={`${cardClass}-title`}>9-08-2016</p>\r\n          <div className={`${cardClass}__info-panel`}>\r\n            <div className={`${cardClass}__info-likes`}>\r\n              <FavoriteIcon style={{ fontSize: 20, color: `${color}`}}/>\r\n              <span className=\"card__info-count\">128</span>\r\n            </div>\r\n            <div className={`${cardClass}-comments`}>\r\n              <ChatBubbleIcon style={{ fontSize: 20, color: `${color}`}}/>\r\n            <span className=\"card__info-count\">31</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={`${cardClass}__info-upload`}>\r\n          <p className={`${cardClass}-title`}>Image upload</p>\r\n          <p className={`${cardClass}__info-panel`}>11-04-2016</p>\r\n        </div>\r\n       \r\n      </div>\r\n    \r\n    </section>\r\n  );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport {Card} from '../Card/Card';\r\nimport cn from 'classnames';\r\nimport './CardList.scss';\r\n\r\nconst cards = [\r\n  {id: '1', title: \"card1\", img: 'img_1.jpg'},\r\n  {id: '2', title: \"card1\", img: 'img_2.jpg'},\r\n  {id: '3', title: \"card1\", img: 'img_3.jpg'},\r\n  {id: '4', title: \"card1\", img: 'img_4.jpg'},\r\n  {id: '5', title: \"card1\", img: 'img_5.jpg'},\r\n  {id: '6', title: \"card1\", img: 'img_6.jpg'},\r\n  {id: '7', title: \"card1\", img: 'img_7.jpg'},\r\n  {id: '8', title: \"card1\", img: 'img_8.jpg'},\r\n  {id: '9', title: \"card1\", img: 'img_9.jpg'},\r\n];\r\n\r\nexport const CardList = () => {\r\n  const [grid, setGrid] = useState(false);\r\n\r\n  const cardListClass = cn({\r\n    cardlist: true,\r\n    'cardlist--grid': grid,\r\n  });\r\n\r\n  return (\r\n    <>\r\n    <div className=\"btn-panel\" style={{display: 'flex'}}>\r\n      <button type=\"button\" className=\"switch-button\" onClick={() => {setGrid(true)}}><img src=\"block_btn.svg\" alt=\"switch_btn\" /></button>\r\n      <button className=\"switch-button\" onClick={() => {setGrid(false)}}><img src=\"card_btn.svg\" alt=\"switch_btn\" /></button>\r\n    </div>\r\n      <ul className={cardListClass}>\r\n        {cards.map(card => (\r\n          <Card grid={grid} card={card}/>   \r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n/*\r\n\r\n    /*<Card\r\n            {...card}\r\n            key={card.id}\r\n          />\r\n  }*/","import React from 'react';\r\nimport './Button.scss';\r\n\r\nexport const Button = () => {\r\n  return (\r\n    <button className=\"load-button\">\r\n      load more\r\n    </button>\r\n  );\r\n}\r\n\r\nexport const SwitchButton = () => {\r\n  return (\r\n    <button className=\"switch-button\">\r\n      <img src=\"grid_btn.svg\" alt=\"switch_btn\" />\r\n    </button>\r\n  );\r\n}","import React from 'react';\nimport {Header} from './components/Header/Header';\nimport {CardList} from './components/CardList/CardList';\nimport { Button } from './components/Button/Button';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main className=\"main\">\n        <div className=\"main__container\">\n          <CardList />\n          <Button />\n        </div>\n      </main>\n      <div className=\"shape1\"></div>\n      <div className=\"shape2\"></div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}